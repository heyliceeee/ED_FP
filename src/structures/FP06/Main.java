package structures.FP06;

import exceptions.EmptyCollectionException;
import interfaces.SmackStackADT;

public class Main {
    public static void main(String[] args) {
        /**
         # Parte I
         1. Defina e implemente a ED SmackStackADT recorrendo a uma das suas implementa√ß√µes de ArrayStack. A ED SmackStackADT tem o mm funcionamento de uma stack normal, no entanto possui + um comportamento Smack q elimina e devolve o √∫ltimo elem da stack. Aten√ß√£o: Dever√° recorrer a heran√ßa pra definir e implementar esta nova estrutura.
         */
        System.out.println("=== üéØ DEMONSTRA√á√ÉO SMACKSTACK ===\n");

        // 1. Teste com ArraySmackStack
        System.out.println("1. ARRAY SMACK STACK:");
        SmackStackADT<String> arraySmack = new ArraySmackStack<>();

        // Push elementos
        arraySmack.push("Primeiro");
        arraySmack.push("Segundo");
        arraySmack.push("Terceiro");
        arraySmack.push("Quarto");

        System.out.println("Stack inicial: " + arraySmack);
        System.out.println("Topo: " + arraySmack.peek());

        // Opera√ß√£o Smack - remove do fundo
        System.out.println("\nOpera√ß√£o SMACK:");
        String smacked = arraySmack.smack();
        System.out.println("Elemento smacked: " + smacked);
        System.out.println("Stack ap√≥s smack: " + arraySmack);

        // Mais opera√ß√µes
        System.out.println("\nMais opera√ß√µes:");
        arraySmack.pop();
        System.out.println("Ap√≥s pop: " + arraySmack);

        arraySmack.smack();
        System.out.println("Ap√≥s outro smack: " + arraySmack);

        // 3. Casos especiais
        System.out.println("\n3. CASOS ESPECIAIS:");

        // Stack vazia
        SmackStackADT<String> vazia = new ArraySmackStack<>();
        try {
            vazia.smack();
        } catch (EmptyCollectionException e) {
            System.out.println("‚úÖ Erro esperado: " + e.getMessage());
        }

        // Um elemento
        SmackStackADT<String> umElemento = new ArraySmackStack<>();
        umElemento.push("√önico");
        System.out.println("Antes do smack: " + umElemento);
        System.out.println("Smack: " + umElemento.smack());
        System.out.println("Ap√≥s smack: " + umElemento);
        System.out.println("Est√° vazia? " + umElemento.isEmpty());

        // 4. Cen√°rio pr√°tico - Sistema de Processamento com Prioridade
        System.out.println("\n4. CEN√ÅRIO PR√ÅTICO - PROCESSAMENTO COM PRIORIDADE:");
        SmackStackADT<String> tarefas = new ArraySmackStack<>();

        tarefas.push("Tarefa Baixa Prioridade");
        tarefas.push("Tarefa M√©dia Prioridade");
        tarefas.push("Tarefa Alta Prioridade");
        tarefas.push("Tarefa Urgente");

        System.out.println("Fila de tarefas: " + tarefas);

        // Processamento normal (LIFO) - tarefas urgentes primeiro
        System.out.println("Processando do topo (urgentes): " + tarefas.pop());

        // Smack - remover tarefa mais antiga (baixa prioridade)
        System.out.println("Removendo tarefa mais antiga: " + tarefas.smack());
        System.out.println("Fila restante: " + tarefas);


        /**
         2. Uma Queue pode ser armazenada em array usando 2 √≠ndices inteiros pra guardar a pr√≥xima posi√ß√£o livre na cauda e a posi√ß√£o do pr√≥ximo elem a ser removido da cabe√ßa. Explique o funcionamento das opera√ß√µes de {enqueue, dequeue, empty, first} de modo q n exista nenhum processo de shift dos elems.
         */



        /**
         3. Descreva cm √© q a {stack, queue} podem ser representadas c recurso a uma LL. Qual √© a principal vantagem em rela√ß√£o √† implementa√ß√£o em array?
         */



        /**
         4. Crie uma implementa√ß√£o de List atrav√©s de uma CircularLL, podendo recorrer √† heran√ßa caso seja aplic√°vel, q funcione de forma circular, ou seja, o √∫ltimo elem da list dever√° apontar pra a cabe√ßa e n pra null.
         */



        /**
         5. Crie uma implementa√ß√£o de List atrav√©s de uma CircularDLL, podendo recorrer a heran√ßa caso seja aplic√°vel, q funcione de forma circular, ou seja, a refer√™ncia seguinte da cauda da list dever√° referenciar a cabe√ßa e n null, assim cm o elem anterior √† cabe√ßa dever√° referenciar a cauda da list em vez de null.
         */



        /**
         6. Desenhe uma fig da estrutura ADT {LL, CircularLL, DLL, CircularDLL} contendo os elems num√©ricos 20, 16, 27, 92. Aten√ß√£o: N pode recorrer a n√≥s sentinelas em nenhuma das estruturas.
         */



        /**
         7. Qual √© a complexidade de tempo em nota√ß√£o Big O das opera√ß√µes de {travessia, inser√ß√£o de um n√≥ no in√≠cio da list, inser√ß√£o de um n√≥ no fim da list} pra as defini√ß√µes ADT {LL, CircularLL, DLL}?
         */



        /**
         8. Implemente um validador simples de XHTML recorrendo √† sua implementa√ß√£o da Stack. Pra o exerc√≠cio considere q um documento XHTML s√≥ √© v√°lido se tds as tags abertas forem fechadas e uma tag s√≥ pode ser fechada se for a q t√° aberta nesse momento (Ver ex). Coloque tds as tags (abertura e fecho) aceites numa List, e quebre a string de entrada por espa√ßos.
         *
         * Ex v√°lido:
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</a> </p>
         * <body>
         *
         * Ex n validos:
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</p></a>
         * </body>
         *
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</a></p>
         */
    }
}
