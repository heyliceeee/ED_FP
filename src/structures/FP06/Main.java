package structures.FP06;

import exceptions.EmptyCollectionException;
import interfaces.SmackStackADT;

public class Main {
    public static void main(String[] args) {
        /**
         # Parte I
         1. Defina e implemente a ED SmackStackADT recorrendo a uma das suas implementa√ß√µes de ArrayStack. A ED SmackStackADT tem o mm funcionamento de uma stack normal, no entanto possui + um comportamento Smack q elimina e devolve o √∫ltimo elem da stack. Aten√ß√£o: Dever√° recorrer a heran√ßa pra definir e implementar esta nova estrutura.
         */
        System.out.println("=== üéØ DEMONSTRA√á√ÉO SMACKSTACK ===\n");

        // 1. Teste com ArraySmackStack
        System.out.println("1. ARRAY SMACK STACK:");
        SmackStackADT<String> arraySmack = new ArraySmackStack<>();

        // Push elementos
        arraySmack.push("Primeiro");
        arraySmack.push("Segundo");
        arraySmack.push("Terceiro");
        arraySmack.push("Quarto");

        System.out.println("Stack inicial: " + arraySmack);
        System.out.println("Topo: " + arraySmack.peek());

        // Opera√ß√£o Smack - remove do fundo
        System.out.println("\nOpera√ß√£o SMACK:");
        String smacked = arraySmack.smack();
        System.out.println("Elemento smacked: " + smacked);
        System.out.println("Stack ap√≥s smack: " + arraySmack);

        // Mais opera√ß√µes
        System.out.println("\nMais opera√ß√µes:");
        arraySmack.pop();
        System.out.println("Ap√≥s pop: " + arraySmack);

        arraySmack.smack();
        System.out.println("Ap√≥s outro smack: " + arraySmack);

        // 3. Casos especiais
        System.out.println("\n3. CASOS ESPECIAIS:");

        // Stack vazia
        SmackStackADT<String> vazia = new ArraySmackStack<>();
        try {
            vazia.smack();
        } catch (EmptyCollectionException e) {
            System.out.println("‚úÖ Erro esperado: " + e.getMessage());
        }

        // Um elemento
        SmackStackADT<String> umElemento = new ArraySmackStack<>();
        umElemento.push("√önico");
        System.out.println("Antes do smack: " + umElemento);
        System.out.println("Smack: " + umElemento.smack());
        System.out.println("Ap√≥s smack: " + umElemento);
        System.out.println("Est√° vazia? " + umElemento.isEmpty());

        // 4. Cen√°rio pr√°tico - Sistema de Processamento com Prioridade
        System.out.println("\n4. CEN√ÅRIO PR√ÅTICO - PROCESSAMENTO COM PRIORIDADE:");
        SmackStackADT<String> tarefas = new ArraySmackStack<>();

        tarefas.push("Tarefa Baixa Prioridade");
        tarefas.push("Tarefa M√©dia Prioridade");
        tarefas.push("Tarefa Alta Prioridade");
        tarefas.push("Tarefa Urgente");

        System.out.println("Fila de tarefas: " + tarefas);

        // Processamento normal (LIFO) - tarefas urgentes primeiro
        System.out.println("Processando do topo (urgentes): " + tarefas.pop());

        // Smack - remover tarefa mais antiga (baixa prioridade)
        System.out.println("Removendo tarefa mais antiga: " + tarefas.smack());
        System.out.println("Fila restante: " + tarefas);


        /**
         2. Uma Queue pode ser armazenada em array usando 2 √≠ndices inteiros pra guardar a pr√≥xima posi√ß√£o livre na cauda e a posi√ß√£o do pr√≥ximo elem a ser removido da cabe√ßa. Explique o funcionamento das opera√ß√µes de {enqueue, dequeue, empty, first} de modo q n exista nenhum processo de shift dos elems.
         */
        // R:
        // Fila Circular - Sem Shifts:
        //  - 2 √≠ndices: front (cabe√ßa) e rear (cauda)
        //  - Comportamento circular: qd chegam ao fim, voltam ao in√≠cio
        //  - enqueue: coloca em rear e avan√ßa circularmente
        //  - dequeue: remove de front e avan√ßa circularmente
        //  - first: olha pra front sem remover
        //  - empty: verifica se front == rear (c controle de size)
        // Resultado: Tds opera√ß√µes O(1) - sem mover elems, s√≥ mexemos nos √≠ndices! üéØ


        /**
         3. Descreva cm √© q a {stack, queue} podem ser representadas c recurso a uma LL. Qual √© a principal vantagem em rela√ß√£o √† implementa√ß√£o em array?
         */
        // R:
        // Stack c LL:
        //  - Topo = head da list
        //  - push = addToFront (O(1))
        //  - pop = removeFirst (O(1))
        //
        // Queue c LinkedList:
        //  - Frente = head, Cauda = tail
        //  - enqueue = addToRear (O(1))
        //  - dequeue = removeFirst (O(1))
        //
        // Principal vantagem vs array:
        //  - CRESCIMENTO DIN√ÇMICO - sem tam fixo, sem redimensionamentos custosos üöÄ


        /**
         4. Crie uma implementa√ß√£o de List atrav√©s de uma CircularLL, podendo recorrer √† heran√ßa caso seja aplic√°vel, q funcione de forma circular, ou seja, o √∫ltimo elem da list dever√° apontar pra a cabe√ßa e n pra null.
         */
        System.out.println("=== üîÑ DEMONSTRA√á√ÉO CIRCULAR LINKED LIST ===\n");

        CircularLinkedList<String> circularList = new CircularLinkedList<>();

        // 1. Adicionar elementos
        System.out.println("1. ADI√á√ÉO DE ELEMENTOS:");
        circularList.addFirst("C");
        circularList.addFirst("B");
        circularList.addFirst("A");
        circularList.addToRear("D");
        circularList.addToRear("E");

        System.out.println("Lista: " + circularList);
        System.out.println("√â circular? " + circularList.isCircular());
        System.out.println("Tamanho: " + circularList.getSize());

        // 2. Percursos circulares
        System.out.println("\n2. PERCURSOS CIRCULARES:");
        circularList.traverseFrom("A");
        circularList.traverseFrom("C");
        circularList.traverseFrom("E");

        // 3. Remo√ß√µes
        System.out.println("\n3. REMO√á√ïES:");
        System.out.println("Remove primeiro: " + circularList.removeFirst());
        System.out.println("Lista: " + circularList);

        System.out.println("Remove √∫ltimo: " + circularList.removeLast());
        System.out.println("Lista: " + circularList);
        System.out.println("√â circular? " + circularList.isCircular());

        // 4. Casos especiais
        System.out.println("\n4. CASOS ESPECIAIS:");

        // Lista com um elemento
        CircularLinkedList<String> umElemento1 = new CircularLinkedList<>();
        umElemento1.addFirst("√önico");
        System.out.println("Um elemento: " + umElemento1);
        System.out.println("√â circular? " + umElemento1.isCircular());

        // Lista vazia
        CircularLinkedList<String> vazia1 = new CircularLinkedList<>();
        System.out.println("Lista vazia: " + vazia1);
        System.out.println("√â circular? " + vazia1.isCircular());

        // 5. Cen√°rio pr√°tico - Jogo de Roda
        System.out.println("\n5. CEN√ÅRIO PR√ÅTICO - JOGO DA RODA:");
        CircularLinkedList<String> roda = new CircularLinkedList<>();
        roda.addToRear("Jo√£o");
        roda.addToRear("Maria");
        roda.addToRear("Pedro");
        roda.addToRear("Ana");

        System.out.println("Jogadores na roda: " + roda);
        roda.traverseFrom("Maria");

        // Simular rodada
        System.out.println("Maria √© eliminada!");
        // (Implementar l√≥gica de remo√ß√£o espec√≠fica)
        System.out.println("Roda atualizada: " + roda);


        /**
         5. Crie uma implementa√ß√£o de List atrav√©s de uma CircularDLL, podendo recorrer a heran√ßa caso seja aplic√°vel, q funcione de forma circular, ou seja, a refer√™ncia seguinte da cauda da list dever√° referenciar a cabe√ßa e n null, assim cm o elem anterior √† cabe√ßa dever√° referenciar a cauda da list em vez de null.
         */
        System.out.println("=== üîÑ DEMONSTRA√á√ÉO CIRCULAR DOUBLY LINKED LIST ===\n");

        CircularDoublyLinkedList<String> circularList1 = new CircularDoublyLinkedList<>();

        // 1. Constru√ß√£o da lista circular
        System.out.println("1. CONSTRU√á√ÉO DA LISTA CIRCULAR:");
        circularList1.addFirst("C");
        circularList1.addFirst("B");
        circularList1.addFirst("A");
        circularList1.addToRear("D");
        circularList1.addToRear("E");

        System.out.println("Lista: " + circularList1);
        System.out.println("Circularidade correta? " + circularList1.isProperlyCircular());
        System.out.println("Tamanho: " + circularList1.getSize());

        // 2. Percursos bidirecionais
        System.out.println("\n2. PERCURSOS BIDIRECIONAIS:");
        circularList1.traverseForward("A");
        circularList1.traverseBackward("A");

        circularList1.traverseForward("C");
        circularList1.traverseBackward("C");

        circularList1.traverseForward("E");
        circularList1.traverseBackward("E");

        // 3. Opera√ß√µes de rota√ß√£o
        System.out.println("\n3. ROTA√á√ïES:");
        System.out.println("Antes: " + circularList1);

        circularList1.rotateForward();
        System.out.println("Rotate forward: " + circularList1);

        circularList1.rotateForward();
        System.out.println("Rotate forward: " + circularList1);

        circularList1.rotateBackward();
        System.out.println("Rotate backward: " + circularList1);

        // 4. Remo√ß√µes mantendo circularidade
        System.out.println("\n4. REMO√á√ïES:");
        System.out.println("Remove primeiro: " + circularList1.removeFirst());
        System.out.println("Lista: " + circularList1);
        System.out.println("Circularidade mantida? " + circularList1.isProperlyCircular());

        System.out.println("Remove √∫ltimo: " + circularList1.removeLast());
        System.out.println("Lista: " + circularList1);

        System.out.println("Remove 'C': " + circularList1.remove("C"));
        System.out.println("Lista: " + circularList1);

        // 5. Casos especiais
        System.out.println("\n5. CASOS ESPECIAIS:");

        // Um elemento
        CircularDoublyLinkedList<String> umElemento2 = new CircularDoublyLinkedList<>();
        umElemento2.addFirst("Solit√°rio");
        System.out.println("Um elemento: " + umElemento2);
        System.out.println("Circularidade? " + umElemento2.isProperlyCircular());
        umElemento2.traverseForward("Solit√°rio");
        umElemento2.traverseBackward("Solit√°rio");

        // Vazia
        CircularDoublyLinkedList<String> vazia2 = new CircularDoublyLinkedList<>();
        System.out.println("Vazia: " + vazia2);
        System.out.println("Circularidade? " + vazia2.isProperlyCircular());

        // 6. Cen√°rio pr√°tico - M√∫sica em Loop
        System.out.println("\n6. CEN√ÅRIO PR√ÅTICO - PLAYLIST CIRCULAR:");
        CircularDoublyLinkedList<String> playlist = new CircularDoublyLinkedList<>();
        playlist.addToRear("M√∫sica 1 - Rock");
        playlist.addToRear("M√∫sica 2 - Jazz");
        playlist.addToRear("M√∫sica 3 - Pop");
        playlist.addToRear("M√∫sica 4 - Cl√°ssica");

        System.out.println("Playlist: " + playlist);

        // Simular reprodu√ß√£o
        System.out.println("\nReprodu√ß√£o em loop:");
        playlist.traverseForward("M√∫sica 1 - Rock");

        System.out.println("\nPular m√∫sicas (rotate):");
        playlist.rotateForward();
        System.out.println("Agora tocando: " + playlist.getHead());

        playlist.rotateForward();
        System.out.println("Agora tocando: " + playlist.getHead());

        // Voltar m√∫sica
        playlist.rotateBackward();
        System.out.println("Voltou para: " + playlist.getHead());


        /**
         6. Desenhe uma fig da estrutura ADT {LL, CircularLL, DLL, CircularDLL} contendo os elems num√©ricos 20, 16, 27, 92. Aten√ß√£o: N pode recorrer a n√≥s sentinelas em nenhuma das estruturas.
         */
        // R:
        // LL
        // [20] ‚Üí [16] ‚Üí [27] ‚Üí [92] ‚Üí null
        // ‚Üë
        //head
        //
        // CircularLL
        //     ‚Üí [20] ‚Üí [16] ‚Üí [27] ‚Üí [92]   ‚îÄ‚îê
        //    ‚Üë                               ‚îÇ
        //    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        //     ‚Üë
        //    head
        //
        // DLL
        // null ‚Üê [20] ‚áÑ [16] ‚áÑ [27] ‚áÑ [92] ‚Üí null
        //         ‚Üë                   ‚Üë
        //        head               tail
        //
        // CircularDLL
        //     ‚îå‚Üí [20] ‚áÑ [16] ‚áÑ [27] ‚áÑ [92]  ‚îÄ‚îê
        //     ‚îÇ                              ‚îÇ
        //     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        //     ‚Üë
        //    head (20)
        //    tail (92) ‚Üí next aponta para head (20)
        //    head (20) ‚Üí prev aponta para tail (92)


        /**
         7. Qual √© a complexidade de tempo em nota√ß√£o Big O das opera√ß√µes de {travessia, inser√ß√£o de um n√≥ no in√≠cio da list, inser√ß√£o de um n√≥ no fim da list} pra as defini√ß√µes ADT {LL, CircularLL, DLL}?
         */
        // R:
        // Travessia: Tds O(n) - t√™m de percorrer tds os elems
        //
        // Inser√ß√£o no in√≠cio: Tds O(1) - s√≥ mexem no head
        //
        // Inser√ß√£o no fim:
        //  - LL: O(n) - tem de percorrer at√© ao √∫ltimo
        //  - CircularLL: O(1) - c tail
        //  - DLL: O(1) - c tail
        //
        // DLL √© a + equilibrada - td O(1) exceto travessia üöÄ


        /**
         8. Implemente um validador simples de XHTML recorrendo √† sua implementa√ß√£o da Stack. Pra o exerc√≠cio considere q um documento XHTML s√≥ √© v√°lido se tds as tags abertas forem fechadas e uma tag s√≥ pode ser fechada se for a q t√° aberta nesse momento (Ver ex). Coloque tds as tags (abertura e fecho) aceites numa List, e quebre a string de entrada por espa√ßos.
         *
         * Ex v√°lido:
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</a> </p>
         * <body>
         *
         * Ex n validos:
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</p></a>
         * </body>
         *
         * <body>
         *      <h1> Titulo </h1>
         *      <p> Corpo com <a>link</a></p>
         */
    }
}
